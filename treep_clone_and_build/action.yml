name: 'Clone and build'
description: 'download sources in a workspace and build them.'

inputs:
  treep_configurations:
    description: 'Treep configurations to clone'
    required: true
    default: ''
  projects_or_repos:
    description: 'New line separated list of repositories to clone.'
    required: true
    default: ''

runs:
  using: "composite"
  steps:
    #
    # Create the build folders
    #
    - name: Create separate environment for build and source dependencies.
      shell: bash
      run: >
        mkdir -p ${BUILD_FOLDER} &&
        mkdir -p ${DEVEL_FOLDER}/workspace/src

    - name: Debug
      shell: bash
      run: | 
        echo "Input treep configurations:"
        while IFS= read -r configuration
        do
          if [ -z "$configuration" ]
          then
            echo "  - $configuration"
          fi
        done <<< "${{ inputs.treep_configurations }}"

        echo "Input project or repository names:"
        while IFS= read -r project_or_repo
        do
          if [ -z "$project_or_repo" ]
          then
            echo "  - $project_or_repo"
          fi
        done <<< "${{ inputs.projects_or_repos }}"

    #
    # Clone all.
    #
    - name: Clone the treep configurations.
      shell: bash
      working-directory: ${{github.workspace}}/devel/
      run: >
        echo "Cloning treep configurations:"
        while IFS= read -r configuration
        do
          if [ -z "$configuration" ]
          then
            echo "- git clone $configuration"
            git clone $configuration ;
          fi
        done <<< "${{ inputs.treep_configurations }}"

    - name: Treep clone the repositories or projects.
      shell: bash
      working-directory: ${{github.workspace}}/devel/
      run: >
        echo "Input project or repository names:"
        while IFS= read -r project_or_repo
        do
          if [ -z "$project_or_repo" ]
          then
            echo "treep --clone $project_or_repo"
            treep --clone $project_or_repo
          fi
        done <<< "${{ inputs.projects_or_repos }}"

    #
    # Build the source dependencies
    #
    - name: Build the dependencies.
      working-directory: ${{github.workspace}}/devel/workspace
      shell: bash
      run: |
        echo colcon build --cmake-args \
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
          -DPYBIND11_TEST=OFF \
          -DBUILD_TESTING=OFF
        colcon build --cmake-args \
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
          -DPYBIND11_TEST=OFF \
          -DBUILD_TESTING=OFF
    